/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package etapa3pi;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author igora
 */
public class Tela_Recepcionista extends javax.swing.JFrame {

    /**
     * Creates new form Tela_Recepcionista
     */
    public Tela_Recepcionista() {
        initComponents();
        carregarHospedes();
        carregarHospedagens();
        carregarAreasLazer();
    }
    private void carregarHospedes() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nome");
        modelo.addColumn("CPF");
        modelo.addColumn("Idade");

        try (Connection conn = Conexao.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM Hospedes")) {
            
            while (rs.next()) {
                modelo.addRow(new Object[]{
                    rs.getInt("idHospedes"),
                    rs.getString("Nome"),
                    rs.getString("cpf"),
                    rs.getInt("idade")
                });
            }
            jTable1.setModel(modelo);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar hóspedes: " + e.getMessage());
        }
    }

    private void carregarHospedagens() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Data Início");
        modelo.addColumn("Data Fim");
        modelo.addColumn("ID Hóspede");

        try (Connection conn = Conexao.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM Hospedagem")) {
            
            while (rs.next()) {
                modelo.addRow(new Object[]{
                    rs.getInt("id_Hospedagem"),
                    rs.getDate("Data_Inicio"),
                    rs.getDate("Data_Fim"),
                    rs.getInt("Hospedes")
                });
            }
            jTable2.setModel(modelo);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar hospedagens: " + e.getMessage());
        }
    }

    private void carregarAreasLazer() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nome");
        modelo.addColumn("Tipo");
        modelo.addColumn("Preço");

        try (Connection conn = Conexao.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM area_de_lazer")) {
            
            while (rs.next()) {
                modelo.addRow(new Object[]{
                    rs.getInt("idarea_de_ lazer"),
                    rs.getString("nome"),
                    rs.getString("tipo"),
                    rs.getDouble("preco")
                });
            }
            jTable3.setModel(modelo);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar áreas de lazer: " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jButton1.setText("Fazer reserva");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Área de lazer");

        jLabel2.setText("Hospedagem");

        jLabel3.setText("Hospedes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addGap(513, 513, 513)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jLabel1)
                .addGap(328, 328, 328)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(146, 146, 146))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        fazerReserva();
    }//GEN-LAST:event_jButton1ActionPerformed
    private void fazerReserva() {
        try {
            // Formulário para cadastrar novo hóspede
            JPanel panel = new JPanel();
            panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
            
            JTextField txtNome = new JTextField(20);
            JTextField txtCpf = new JTextField(20);
            JTextField txtIdade = new JTextField(20);
            JTextField txtDataInicio = new JTextField(20);
            JTextField txtDataFim = new JTextField(20);
            JTextField txtAreaLazer = new JTextField(20);
            
            panel.add(new JLabel("Nome do Hóspede:"));
            panel.add(txtNome);
            panel.add(new JLabel("CPF (apenas números):"));
            panel.add(txtCpf);
            panel.add(new JLabel("Idade:"));
            panel.add(txtIdade);
            panel.add(new JLabel("Data de Início (DD/MM/AAAA):"));
            panel.add(txtDataInicio);
            panel.add(new JLabel("Data de Término (DD/MM/AAAA):"));
            panel.add(txtDataFim);
            panel.add(new JLabel("ID da Área de Lazer:"));
            panel.add(txtAreaLazer);
            
            int result = JOptionPane.showConfirmDialog(
                this, panel, "Cadastrar Hóspede e Reserva", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            
            if (result != JOptionPane.OK_OPTION) {
                return; // Usuário cancelou
            }
            
            // Validar campos
            if (txtNome.getText().isEmpty() || txtCpf.getText().isEmpty() || 
                txtIdade.getText().isEmpty() || txtDataInicio.getText().isEmpty() || 
                txtDataFim.getText().isEmpty() || txtAreaLazer.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos!");
                return;
            }
            
            // Converter datas
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate dataInicio = LocalDate.parse(txtDataInicio.getText(), formatter);
            LocalDate dataFim = LocalDate.parse(txtDataFim.getText(), formatter);
            
            if (dataFim.isBefore(dataInicio)) {
                JOptionPane.showMessageDialog(this, "Data de término deve ser após data de início!");
                return;
            }
            
            try (Connection conn = Conexao.conectar()) {
                conn.setAutoCommit(false); // Iniciar transação
                
                // 1. Cadastrar hóspede
                String sqlHospede = "INSERT INTO Hospedes (Nome, cpf, idade) VALUES (?, ?, ?)";
                PreparedStatement stmtHospede = conn.prepareStatement(sqlHospede, Statement.RETURN_GENERATED_KEYS);
                stmtHospede.setString(1, txtNome.getText());
                stmtHospede.setString(2, txtCpf.getText());
                stmtHospede.setInt(3, Integer.parseInt(txtIdade.getText()));
                stmtHospede.executeUpdate();
                
                // Pegar ID do hóspede inserido
                int idHospede;
                try (ResultSet generatedKeys = stmtHospede.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        idHospede = generatedKeys.getInt(1);
                    } else {
                        throw new SQLException("Falha ao obter ID do hóspede");
                    }
                }
                
                // 2. Cadastrar hospedagem
                String sqlHospedagem = "INSERT INTO Hospedagem (Data_Inicio, Data_Fim, Hospedes) VALUES (?, ?, ?)";
                PreparedStatement stmtHospedagem = conn.prepareStatement(sqlHospedagem, Statement.RETURN_GENERATED_KEYS);
                stmtHospedagem.setDate(1, Date.valueOf(dataInicio));
                stmtHospedagem.setDate(2, Date.valueOf(dataFim));
                stmtHospedagem.setInt(3, idHospede);
                stmtHospedagem.executeUpdate();
                
                // Pegar ID da hospedagem inserida
                int idHospedagem;
                try (ResultSet generatedKeys = stmtHospedagem.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        idHospedagem = generatedKeys.getInt(1);
                    } else {
                        throw new SQLException("Falha ao obter ID da hospedagem");
                    }
                }
                
                // 3. Vincular área de lazer
                String sqlRelacionamento = "INSERT INTO Hospedagem_has_area_de_lazer VALUES (?, ?)";
                PreparedStatement stmtRel = conn.prepareStatement(sqlRelacionamento);
                stmtRel.setInt(1, idHospedagem);
                stmtRel.setInt(2, Integer.parseInt(txtAreaLazer.getText()));
                stmtRel.executeUpdate();
                
                conn.commit(); // Confirmar transação
                JOptionPane.showMessageDialog(this, "Hóspede e reserva cadastrados com sucesso!");
                
                // Atualizar tabelas
                carregarHospedes();
                carregarHospedagens();
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro no banco de dados: " + e.getMessage());
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }

    }

    // [Restante do código permanece igual]
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_Recepcionista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_Recepcionista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_Recepcionista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_Recepcionista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_Recepcionista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
